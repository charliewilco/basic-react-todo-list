{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport produce from \"immer\";\nimport { v4 as uuid } from \"uuid\";\nexport let TodoActions;\n\n(function (TodoActions) {\n  TodoActions[\"ADD_TODO\"] = \"ADD_TODO\";\n  TodoActions[\"EDIT_TODO\"] = \"EDIT_TODO\";\n  TodoActions[\"UPDATE_TODO\"] = \"UPDATE_TODO\";\n  TodoActions[\"REMOVE_TODO\"] = \"REMOVE_TODO\";\n  TodoActions[\"MARK_AS_COMPLETED\"] = \"MARK_AS_COMPLETED\";\n  TodoActions[\"MARK_AS_NOT_COMPLETED\"] = \"MARK_AS_NOT_COMPLETED\";\n  TodoActions[\"OPEN_MODAL\"] = \"OPEN_MODAL\";\n  TodoActions[\"DISMISS_MODAL\"] = \"DISMISS_MODAL\";\n})(TodoActions || (TodoActions = {}));\n\nexport const INITIAL_LIST = [{\n  id: uuid(),\n  completed: false,\n  task: \"get lunch\",\n  editing: false\n}, {\n  id: uuid(),\n  completed: false,\n  task: \"Check Flight\",\n  editing: false\n}];\nexport const GLOBAL_TODOS = {\n  todos: [...INITIAL_LIST]\n};\nexport const reducer = produce((draft, action) => {\n  switch (action.type) {\n    case TodoActions.ADD_TODO:\n      {\n        if (action.payload.length > 0) {\n          draft.todos.unshift({\n            task: action.payload,\n            id: uuid(),\n            completed: false,\n            editing: false\n          });\n        }\n\n        draft.modalOpen = false;\n        break;\n      }\n\n    case TodoActions.UPDATE_TODO:\n      {\n        const index = draft.todos.findIndex(element => element.id === action.id);\n        draft.todos[index] = _objectSpread({}, draft.todos[index], {\n          editing: false,\n          task: action.payload\n        });\n        draft.selected = null;\n        draft.modalOpen = false;\n        break;\n      }\n\n    case TodoActions.REMOVE_TODO:\n      {\n        const index = draft.todos.findIndex(element => element.id === action.id);\n        draft.todos.splice(index, 1);\n        break;\n      }\n\n    case TodoActions.EDIT_TODO:\n      {\n        const index = draft.todos.findIndex(element => element.id === action.id);\n        draft.modalOpen = true;\n        draft.todos[index] = _objectSpread({}, draft.todos[index], {\n          editing: true\n        });\n        draft.selected = {\n          task: draft.todos[index].task,\n          id: draft.todos[index].id\n        };\n        break;\n      }\n\n    case TodoActions.MARK_AS_NOT_COMPLETED:\n      {\n        const index = draft.todos.findIndex(element => element.id === action.id);\n        draft.todos[index] = _objectSpread({}, draft.todos[index], {\n          completed: false\n        });\n        break;\n      }\n\n    case TodoActions.MARK_AS_COMPLETED:\n      {\n        const index = draft.todos.findIndex(element => element.id === action.id);\n        draft.todos[index] = _objectSpread({}, draft.todos[index], {\n          completed: true\n        });\n        break;\n      }\n\n    case TodoActions.DISMISS_MODAL:\n      {\n        draft.modalOpen = false;\n        draft.selected = null;\n        break;\n      }\n\n    case TodoActions.OPEN_MODAL:\n      {\n        draft.modalOpen = true;\n        break;\n      }\n  }\n});","map":{"version":3,"sources":["/Users/charlespeters/Code/basic-react-todo-list/src/reducer.ts"],"names":["produce","v4","uuid","TodoActions","INITIAL_LIST","id","completed","task","editing","GLOBAL_TODOS","todos","reducer","draft","action","type","ADD_TODO","payload","length","unshift","modalOpen","UPDATE_TODO","index","findIndex","element","selected","REMOVE_TODO","splice","EDIT_TODO","MARK_AS_NOT_COMPLETED","MARK_AS_COMPLETED","DISMISS_MODAL","OPEN_MODAL"],"mappings":";;;;;;AACA,OAAOA,OAAP,MAAoB,OAApB;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AAqBA,WAAYC,WAAZ;;WAAYA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W;;AAWZ,OAAO,MAAMC,YAAwB,GAAG,CACtC;AACEC,EAAAA,EAAE,EAAEH,IAAI,EADV;AAEEI,EAAAA,SAAS,EAAE,KAFb;AAGEC,EAAAA,IAAI,EAAE,WAHR;AAIEC,EAAAA,OAAO,EAAE;AAJX,CADsC,EAOtC;AACEH,EAAAA,EAAE,EAAEH,IAAI,EADV;AAEEI,EAAAA,SAAS,EAAE,KAFb;AAGEC,EAAAA,IAAI,EAAE,cAHR;AAIEC,EAAAA,OAAO,EAAE;AAJX,CAPsC,CAAjC;AAeP,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,KAAK,EAAE,CAAC,GAAGN,YAAJ;AADmB,CAArB;AA0BP,OAAO,MAAMO,OAA8C,GAAGX,OAAO,CACnE,CAACY,KAAD,EAAwBC,MAAxB,KAA2C;AACzC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,WAAW,CAACY,QAAjB;AAA2B;AACzB,YAAIF,MAAM,CAACG,OAAP,CAAeC,MAAf,GAAwB,CAA5B,EAA+B;AAC7BL,UAAAA,KAAK,CAACF,KAAN,CAAYQ,OAAZ,CAAoB;AAClBX,YAAAA,IAAI,EAAEM,MAAM,CAACG,OADK;AAElBX,YAAAA,EAAE,EAAEH,IAAI,EAFU;AAGlBI,YAAAA,SAAS,EAAE,KAHO;AAIlBE,YAAAA,OAAO,EAAE;AAJS,WAApB;AAMD;;AACDI,QAAAA,KAAK,CAACO,SAAN,GAAkB,KAAlB;AACA;AACD;;AACD,SAAKhB,WAAW,CAACiB,WAAjB;AAA8B;AAC5B,cAAMC,KAAK,GAAGT,KAAK,CAACF,KAAN,CAAYY,SAAZ,CAAsBC,OAAO,IAAIA,OAAO,CAAClB,EAAR,KAAeQ,MAAM,CAACR,EAAvD,CAAd;AAEAO,QAAAA,KAAK,CAACF,KAAN,CAAYW,KAAZ,sBACKT,KAAK,CAACF,KAAN,CAAYW,KAAZ,CADL;AAEEb,UAAAA,OAAO,EAAE,KAFX;AAGED,UAAAA,IAAI,EAAEM,MAAM,CAACG;AAHf;AAKAJ,QAAAA,KAAK,CAACY,QAAN,GAAiB,IAAjB;AACAZ,QAAAA,KAAK,CAACO,SAAN,GAAkB,KAAlB;AACA;AACD;;AACD,SAAKhB,WAAW,CAACsB,WAAjB;AAA8B;AAC5B,cAAMJ,KAAK,GAAGT,KAAK,CAACF,KAAN,CAAYY,SAAZ,CAAsBC,OAAO,IAAIA,OAAO,CAAClB,EAAR,KAAeQ,MAAM,CAACR,EAAvD,CAAd;AAEAO,QAAAA,KAAK,CAACF,KAAN,CAAYgB,MAAZ,CAAmBL,KAAnB,EAA0B,CAA1B;AAEA;AACD;;AACD,SAAKlB,WAAW,CAACwB,SAAjB;AAA4B;AAC1B,cAAMN,KAAK,GAAGT,KAAK,CAACF,KAAN,CAAYY,SAAZ,CAAsBC,OAAO,IAAIA,OAAO,CAAClB,EAAR,KAAeQ,MAAM,CAACR,EAAvD,CAAd;AAEAO,QAAAA,KAAK,CAACO,SAAN,GAAkB,IAAlB;AACAP,QAAAA,KAAK,CAACF,KAAN,CAAYW,KAAZ,sBACKT,KAAK,CAACF,KAAN,CAAYW,KAAZ,CADL;AAEEb,UAAAA,OAAO,EAAE;AAFX;AAKAI,QAAAA,KAAK,CAACY,QAAN,GAAiB;AACfjB,UAAAA,IAAI,EAAEK,KAAK,CAACF,KAAN,CAAYW,KAAZ,EAAmBd,IADV;AAEfF,UAAAA,EAAE,EAAEO,KAAK,CAACF,KAAN,CAAYW,KAAZ,EAAmBhB;AAFR,SAAjB;AAKA;AACD;;AACD,SAAKF,WAAW,CAACyB,qBAAjB;AAAwC;AACtC,cAAMP,KAAK,GAAGT,KAAK,CAACF,KAAN,CAAYY,SAAZ,CAAsBC,OAAO,IAAIA,OAAO,CAAClB,EAAR,KAAeQ,MAAM,CAACR,EAAvD,CAAd;AAEAO,QAAAA,KAAK,CAACF,KAAN,CAAYW,KAAZ,sBACKT,KAAK,CAACF,KAAN,CAAYW,KAAZ,CADL;AAEEf,UAAAA,SAAS,EAAE;AAFb;AAKA;AACD;;AACD,SAAKH,WAAW,CAAC0B,iBAAjB;AAAoC;AAClC,cAAMR,KAAK,GAAGT,KAAK,CAACF,KAAN,CAAYY,SAAZ,CAAsBC,OAAO,IAAIA,OAAO,CAAClB,EAAR,KAAeQ,MAAM,CAACR,EAAvD,CAAd;AAEAO,QAAAA,KAAK,CAACF,KAAN,CAAYW,KAAZ,sBACKT,KAAK,CAACF,KAAN,CAAYW,KAAZ,CADL;AAEEf,UAAAA,SAAS,EAAE;AAFb;AAKA;AACD;;AACD,SAAKH,WAAW,CAAC2B,aAAjB;AAAgC;AAC9BlB,QAAAA,KAAK,CAACO,SAAN,GAAkB,KAAlB;AACAP,QAAAA,KAAK,CAACY,QAAN,GAAiB,IAAjB;AAEA;AACD;;AAED,SAAKrB,WAAW,CAAC4B,UAAjB;AAA6B;AAC3BnB,QAAAA,KAAK,CAACO,SAAN,GAAkB,IAAlB;AACA;AACD;AA9EH;AAgFD,CAlFkE,CAA9D","sourcesContent":["import * as React from \"react\";\nimport produce from \"immer\";\nimport { v4 as uuid } from \"uuid\";\n\nexport interface TodoItem {\n  completed: boolean;\n  id: string;\n  task: string;\n  editing: boolean;\n}\n\nexport type Filters = \"All\" | \"Completed\" | \"Todo\";\n\ninterface ITodoListState {\n  todos: TodoItem[];\n  currentFilter: Filters;\n  modalOpen: boolean;\n  selected: null | {\n    task: string;\n    id: string;\n  };\n}\n\nexport enum TodoActions {\n  ADD_TODO = \"ADD_TODO\",\n  EDIT_TODO = \"EDIT_TODO\",\n  UPDATE_TODO = \"UPDATE_TODO\",\n  REMOVE_TODO = \"REMOVE_TODO\",\n  MARK_AS_COMPLETED = \"MARK_AS_COMPLETED\",\n  MARK_AS_NOT_COMPLETED = \"MARK_AS_NOT_COMPLETED\",\n  OPEN_MODAL = \"OPEN_MODAL\",\n  DISMISS_MODAL = \"DISMISS_MODAL\"\n}\n\nexport const INITIAL_LIST: TodoItem[] = [\n  {\n    id: uuid(),\n    completed: false,\n    task: \"get lunch\",\n    editing: false\n  },\n  {\n    id: uuid(),\n    completed: false,\n    task: \"Check Flight\",\n    editing: false\n  }\n];\n\nexport const GLOBAL_TODOS = {\n  todos: [...INITIAL_LIST]\n};\n\nexport type Action =\n  | {\n      type: TodoActions.ADD_TODO;\n      payload: string;\n    }\n  | {\n      type: TodoActions.UPDATE_TODO;\n      id: string;\n      payload: string;\n    }\n  | {\n      type:\n        | TodoActions.EDIT_TODO\n        | TodoActions.REMOVE_TODO\n        | TodoActions.MARK_AS_COMPLETED\n        | TodoActions.MARK_AS_NOT_COMPLETED;\n      id: string;\n    }\n  | {\n      type: TodoActions.OPEN_MODAL | TodoActions.DISMISS_MODAL;\n    };\n\nexport const reducer: React.Reducer<ITodoListState, Action> = produce(\n  (draft: ITodoListState, action: Action) => {\n    switch (action.type) {\n      case TodoActions.ADD_TODO: {\n        if (action.payload.length > 0) {\n          draft.todos.unshift({\n            task: action.payload,\n            id: uuid(),\n            completed: false,\n            editing: false\n          });\n        }\n        draft.modalOpen = false;\n        break;\n      }\n      case TodoActions.UPDATE_TODO: {\n        const index = draft.todos.findIndex(element => element.id === action.id);\n\n        draft.todos[index] = {\n          ...draft.todos[index],\n          editing: false,\n          task: action.payload\n        };\n        draft.selected = null;\n        draft.modalOpen = false;\n        break;\n      }\n      case TodoActions.REMOVE_TODO: {\n        const index = draft.todos.findIndex(element => element.id === action.id);\n\n        draft.todos.splice(index, 1);\n\n        break;\n      }\n      case TodoActions.EDIT_TODO: {\n        const index = draft.todos.findIndex(element => element.id === action.id);\n\n        draft.modalOpen = true;\n        draft.todos[index] = {\n          ...draft.todos[index],\n          editing: true\n        };\n\n        draft.selected = {\n          task: draft.todos[index].task,\n          id: draft.todos[index].id\n        };\n\n        break;\n      }\n      case TodoActions.MARK_AS_NOT_COMPLETED: {\n        const index = draft.todos.findIndex(element => element.id === action.id);\n\n        draft.todos[index] = {\n          ...draft.todos[index],\n          completed: false\n        };\n\n        break;\n      }\n      case TodoActions.MARK_AS_COMPLETED: {\n        const index = draft.todos.findIndex(element => element.id === action.id);\n\n        draft.todos[index] = {\n          ...draft.todos[index],\n          completed: true\n        };\n\n        break;\n      }\n      case TodoActions.DISMISS_MODAL: {\n        draft.modalOpen = false;\n        draft.selected = null;\n\n        break;\n      }\n\n      case TodoActions.OPEN_MODAL: {\n        draft.modalOpen = true;\n        break;\n      }\n    }\n  }\n);\n"]},"metadata":{},"sourceType":"module"}